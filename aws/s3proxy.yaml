AWSTemplateFormatVersion: "2010-09-09"
Description: Create a s3 proxy to host static websites on s3
Resources:
  websitebucket:
    Type: "AWS::S3::Bucket"
    DeletionPolicy: "Delete"
    Properties:
      BucketName: "s3proxywebsite"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true


  websitepolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref websitebucket
      PolicyDocument:
          Version: 2012-10-17
          Statement:
            - Action:
              - 's3:Get*'
              - 's3:List*'
              Effect: Allow
              Principal:
                Service: 'apigateway.amazonaws.com'
              Resource: !Join
                - ''
                - - 'arn:aws:s3:::'
                  - !Ref websitebucket
                  - /*


  ApiGatewayRestApi:
    Type: AWS::ApiGateway::RestApi
    Description: Gateway to the s3  site
    Properties:
      Name: s3proxygateway
      EndpointConfiguration:
        Types:
          - REGIONAL

#  ApiGatewayMethodGetRoot:
#    Type: AWS::ApiGateway::Method
#    Description: Located at root resource to proxy to S3 bucket website
#    Properties:
#      HttpMethod: GET
#      ResourceId:
#        Fn::GetAtt: [ApiGatewayRestApi, RootResourceId]
#      RestApiId: !Ref ApiGatewayRestApi
#      ApiKeyRequired: false
#      AuthorizationType: NONE
#      Integration:
#        IntegrationHttpMethod: GET
#        Type: HTTP_PROXY
#        Uri:
#          Fn::Join: [ '',[ 'arn:aws:apigateway:eu-central-1:s3:', 'path/', !Ref websitebucket, '/{item}' ] ]


  Deployment:
    DependsOn: ApiGatewayMethodGetItem
    Type: 'AWS::ApiGateway::Deployment'
    Properties:
      RestApiId: !Ref ApiGatewayRestApi
      Description: Gateway Deployment
      StageName: Dev

  Dev:
    Type: AWS::ApiGateway::Stage
    Properties:
      StageName: Dev
      Description: Dev Stage
      RestApiId: !Ref ApiGatewayRestApi
      DeploymentId: !Ref Deployment
#      DocumentationVersion: !Ref MyDocumentationVersion
#      ClientCertificateId: !Ref ClientCertificate
#      Variables:
#        Stack: Prod
      MethodSettings:
        - ResourcePath: /
          HttpMethod: GET
          MetricsEnabled: 'true'
          DataTraceEnabled: 'false'

  ApiGatewayResourceItem:
    Type: AWS::ApiGateway::Resource
    Properties:
      ParentId:
        Fn::GetAtt: [ApiGatewayRestApi, RootResourceId]
      PathPart: '{item}'
      RestApiId:  !Ref ApiGatewayRestApi

  ApiGatewayMethodGetItem:
    Type: AWS::ApiGateway::Method
    Description: Located at {item} resource to get items from S3 bucket
    Properties:
      HttpMethod: GET
      ResourceId: !Ref ApiGatewayResourceItem
      RestApiId: !Ref ApiGatewayRestApi
      ApiKeyRequired: false
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.item: true
        method.request.header.Content-Disposition: false
        method.request.header.Content-Type: false
      MethodResponses:
        - ResponseParameters:
            method.response.header.Content-Disposition: true
            method.response.header.Content-Type: true
          StatusCode: 200
      Integration:
        RequestParameters:
          integration.request.path.item: method.request.path.item
          integration.request.header.Content-Disposition: method.request.header.Content-Disposition
          integration.request.header.Content-Type: method.request.header.Content-Type

        IntegrationHttpMethod: GET
        Type: AWS
        Uri:
          Fn::Join: ['',['arn:aws:apigateway:eu-central-1:s3:', 'path/', !Ref websitebucket, '/{item}']]
        Credentials:
          Fn::GetAtt: [GatewayRole, Arn]
        IntegrationResponses:
          - StatusCode: 200
            SelectionPattern: 200
            ResponseParameters:
              method.response.header.Content-Disposition: integration.response.header.Content-Disposition
              method.response.header.Content-Type: integration.response.header.Content-Type


  GatewayRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Description: Gives api endpoints access to S3
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess
      RoleName: API-Gateway-S3-read-access-s3proxy
      Path: /

Outputs:
  WebsiteUrl:
    Value:
      Fn::Join: [ '',[ 'https://', !Ref ApiGatewayRestApi , '.execute-api.', !Ref 'AWS::Region', '.amazonaws.com/', !Ref Dev, '/index.html' ] ]
